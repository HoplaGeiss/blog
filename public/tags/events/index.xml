<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Events on Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/tags/events/</link>
    <description>Recent content in Events on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 09 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/tags/events/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit test events</title>
      <link>http://www.muller.tech/post/2017/01/09/unit-test-events/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/09/unit-test-events/</guid>
      <description>Scenario In this example I will demonstrate how to unit test an event. The difficulty here, is to set the element&amp;rsquo;s target.
$scope.toggleRadioButton = function (e) { e.stopImmediatePropagation(); if (angular.element(e.target).hasClass(&amp;#39;my-radio-button&amp;#39;)) { $scope.selectedButton = true; } };  Solution it(&amp;#39;stopImmediatePropagation is called and $scope.selectedButton is set to true&amp;#39;, function () { elem = angular.element(&amp;#39;&amp;lt;div class=&amp;quot;my-radio-button&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;); event = { target: elem, stopImmediatePropagation: function () {} }; spyOn(event, &amp;#39;stopImmediatePropagation&amp;#39;); scope.toggleRadioButton(event); expect(event.stopImmediatePropagation).toHaveBeenCalled(); expect(scope.selectedButton).toEqual(true); });  Analysis  We create an element with the class my-radio-button We create an event with two parameters, the element we just created and a fake stopImmediatePropagation function We spy on event.</description>
    </item>
    
  </channel>
</rss>