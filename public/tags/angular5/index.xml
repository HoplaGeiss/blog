<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular5 on Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/tags/angular5/</link>
    <description>Recent content in Angular5 on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 08 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/tags/angular5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ngrx Guards and Resolvers</title>
      <link>http://www.muller.tech/post/2018/11/08/ngrx-resolvers-guards/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2018/11/08/ngrx-resolvers-guards/</guid>
      <description>In this post, we will have a look at an example of an ngrx application using guards and resolvers. Based on this, we will see when guards and resolvers are best using with ngrx.
Personally, I find one of the main advantages of using ngrx is to handle data in a more efficient way, e.g. not re-loading the data when it&amp;rsquo;s already in state.
All the example I found online while learning about ngrx were using guards, and I didn&amp;rsquo;t quite understand why that was.</description>
    </item>
    
    <item>
      <title>Angular 5 - Unit Test ngOnChanges</title>
      <link>http://www.muller.tech/post/2017/11/22/angular5-unittest-ngonchanges/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/11/22/angular5-unittest-ngonchanges/</guid>
      <description>In this post you will learn how to unit test a component that uses ngOnChanges.
Component under test import { Component, OnInit, OnChanges } from &amp;#39;@angular/core&amp;#39;; @Component({ selector: &amp;#39;hopla-component&amp;#39;, template: ` &amp;lt;div&amp;gt;Hopla Hopla&amp;lt;/div&amp;gt; ` }) export class HoplaComponent implements OnInit, OnChanges { @Input() data: Array&amp;lt;object&amp;gt;; ngOnInit(){ // do something  } ngOnChanges(){ superFunction(data) } superFunction(input) =&amp;gt; { // do something with input  } } Unit test it(&amp;#39;OnChanges: updates the form with the site value&amp;#39;, () =&amp;gt; { const superFunctionSpy = spyOn(comp, &amp;#39;superFunction&amp;#39;); const data = [{value: 1}, {value: 2}] fixture.</description>
    </item>
    
  </channel>
</rss>