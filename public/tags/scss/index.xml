<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scss on Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/tags/scss/</link>
    <description>Recent content in Scss on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 22 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/tags/scss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular 5 - Colour Scheme directive</title>
      <link>http://www.muller.tech/post/2017/11/22/angular5-colour-scheme/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/11/22/angular5-colour-scheme/</guid>
      <description>If you are developing a large application, chances are you already have thought of how to adapt the app&amp;rsquo;s colour scheme to the user. In this post you will discover just how to do this!
Bacic implementation - static colour scheme The most basic implementation is to have a scss file with variables for your colours scheme.
 $primary: #57a1c6; $highlight: #4fc3f7; $accent: #ee7175;  However that only works if you have a single colour scheme.</description>
    </item>
    
  </channel>
</rss>