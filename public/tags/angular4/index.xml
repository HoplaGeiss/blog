<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular4 on Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/tags/angular4/</link>
    <description>Recent content in Angular4 on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 16 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/tags/angular4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular 4 dropdown</title>
      <link>http://www.muller.tech/post/2017/08/16/angular4-dropdown/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/08/16/angular4-dropdown/</guid>
      <description>Dropdowns are a very common way of displaying multiple choice inputs. Today&amp;rsquo;s post is about creating a dropdown without using bootstrap or other styling frameworks.
If you are in a hurry, you can checkout the code on my github account: https://github.com/HoplaGeiss/hopla-dropdown
Let&amp;rsquo;s first take a look at the main component.
// app.component.ts import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;; @Component({ selector: &amp;#39;app-root&amp;#39;, styleUrls: [&amp;#39;./app.component.scss&amp;#39;], template: ` &amp;lt;div class=&amp;#39;wrapper&amp;#39;&amp;gt; &amp;lt;div class=&amp;#39;selected-item&amp;#39; fxLayout=&amp;quot;row&amp;quot; fxLayoutAlign=&amp;quot;space-between center&amp;quot; [ngClass]=&amp;#39;{&amp;quot;active&amp;quot;: dropdownActive}&amp;#39;&amp;gt; &amp;lt;div&amp;gt;{{selectedItem}}&amp;lt;/div&amp;gt; &amp;lt;i class=&amp;#39;material-icons&amp;#39; (click)=&amp;#39;toggleDropdown()&amp;#39;&amp;gt;keyboard_arrow_down&amp;lt;/i&amp;gt; &amp;lt;div class=&amp;#39;dropdown&amp;#39; [hidden]=&amp;#39;!</description>
    </item>
    
    <item>
      <title>Angular 4 - Dynamically add components to the DOM</title>
      <link>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</guid>
      <description>Today we are going to talk about dynamic component and how to add them to the DOM, but first let&amp;rsquo;s take a look at how we can add content to components.
Single content If you are looking to add a &amp;lsquo;single bit of content&amp;rsquo; to a component, you can use ng-content.
In the following example we have two components. AppComponent calls HoplaComponent and passes him some content. HoplaComponent access this content thanks to ng-content.</description>
    </item>
    
    <item>
      <title>Angular 4 - Nested Routing</title>
      <link>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</guid>
      <description>Applications are often separated in two parts. A home with the description of the application, the features, a pricing table etc.. And a second part that requires the users to log in with for example an admin panel, an overview and dashboards.
Following the DRY principle, you should aim at having a template for the home and the main part of your website. The best way to achieve this is to have nested routes.</description>
    </item>
    
    <item>
      <title>Angular 4 - Switch button</title>
      <link>http://www.muller.tech/post/2017/07/26/angular4-switch-button/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/07/26/angular4-switch-button/</guid>
      <description>Ever wondered how to create a switch button in angular4 without using css frameworks? Here we go..
Let&amp;rsquo;s take a look at the component first.
// app.component.ts import { Component } from &amp;#39;@angular/core&amp;#39;; @Component({ selector: &amp;#39;app-root&amp;#39;, template: ` &amp;lt;div class=&amp;quot;switch&amp;quot;&amp;gt; &amp;lt;input id=&amp;#39;switch-input&amp;#39; type=&amp;#39;checkbox&amp;#39; [checked]=&amp;#39;switchActive&amp;#39; (click)=&amp;#39;toggle()&amp;#39;&amp;gt; &amp;lt;label for=&amp;#39;switch-input&amp;#39;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; ` }) export class AppComponent { switchActive = false toggle = () =&amp;gt; { if (this.switchActive) { // Do something } else { // Do something else } this.</description>
    </item>
    
    <item>
      <title>Angular 4 - Create a modal</title>
      <link>http://www.muller.tech/post/2017/04/03/angular4-create-modal/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/04/03/angular4-create-modal/</guid>
      <description>After my previous post about creating a simple accordion with angular 4, I will now walk you through my implementation of a modal in angular 4. To create the modal I used two files modal.component.ts and modal.service.ts and organised it in the usual component based architecture.
Demo: http://www.muller.tech/hopla-modal/
Source Code: https://github.com/HoplaGeiss/hopla-modal
Now let&amp;rsquo;s take a look at both files.
// modal/modal.component.ts import { Component, Input, OnInit, HostListener } from &amp;#39;@angular/core&amp;#39;; import { ModalService } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Angular 4 - create an accordion</title>
      <link>http://www.muller.tech/post/2017/04/03/create-angular4-accordion/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/04/03/create-angular4-accordion/</guid>
      <description>After looking for a while for a simple accordion component on npm I was very surprised not to find any. So I began implementing my own. To create the accordion I used two components AccordionComponent and AccordionGroupComponent and organised it in the usual component based architecture.
Now let&amp;rsquo;s take a look at both files.
Demo: http://www.muller.tech/hopla-accordion/index.html
Source Code: https://github.com/HoplaGeiss/hopla-accordion
// ./accordion/accordion.component.ts import { Component, Input } from &amp;#39;@angular/core&amp;#39;; import { AccordionGroupComponent } from &amp;#39;.</description>
    </item>
    
  </channel>
</rss>