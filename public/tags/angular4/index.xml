<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular4 on Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/tags/angular4/</link>
    <description>Recent content in Angular4 on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 04 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/tags/angular4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular 4 - Dynamically add components to the DOM</title>
      <link>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</guid>
      <description>Today we are going to talk about dynamic component and how to add them to the DOM, but first let&amp;rsquo;s take a look at how we can add content to components.
Single content If you are looking to add a &amp;lsquo;single bit of content&amp;rsquo; to a component, you can use ng-content.
In the following example we have two components. AppComponent calls HoplaComponent and passes him some content. HoplaComponent access this content thanks to ng-content.</description>
    </item>
    
    <item>
      <title>Angular 4 - Nested Routing</title>
      <link>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</guid>
      <description>Applications are often separated in two parts. A home with the description of the application, the features, a pricing table etc.. And a second part that requires the users to log in with for example an admin panel, an overview and dashboards.
Following the DRY principle, you should aim at having a template for the home and the main part of your website. The best way to achieve this is to have nested routes.</description>
    </item>
    
  </channel>
</rss>