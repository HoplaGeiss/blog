<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel Muller - JavaScript and Angular articles</title>
    <link>http://www.muller.tech/</link>
    <description>Recent content on Gabriel Muller - JavaScript and Angular articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 08 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.muller.tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ngrx Guards and Resolvers</title>
      <link>http://www.muller.tech/post/2018/11/08/ngrx-resolvers-guards/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2018/11/08/ngrx-resolvers-guards/</guid>
      <description>I moved the location of that post. Please visit: https://ludan.io/blog/ngrx_guards_and_resolvers</description>
    </item>
    
    <item>
      <title>Angular 5 - Unit Test ngOnChanges</title>
      <link>http://www.muller.tech/post/2017/11/22/angular5-unittest-ngonchanges/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/11/22/angular5-unittest-ngonchanges/</guid>
      <description>I moved the location of that post. Please visit: https://ludan.io/blog/angular_unit_test_ng_on_changes</description>
    </item>
    
    <item>
      <title>Angular 4 - Dynamically add components to the DOM</title>
      <link>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/08/04/angular4-dynamically-add-component/</guid>
      <description>I moved the location of that post. Please visit: https://ludan.io/blog/dynamically_add_component</description>
    </item>
    
    <item>
      <title>Angular 4 - Nested Routing</title>
      <link>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/07/26/angular4-nested-routing/</guid>
      <description>Applications are often separated in two parts. A home with the description of the application, the features, a pricing table etc.. And a second part that requires the users to log in with for example an admin panel, an overview and dashboards.
Following the DRY principle, you should aim at having a template for the home and the main part of your website. The best way to achieve this is to have nested routes.</description>
    </item>
    
    <item>
      <title>Node.js - Package.json scripts</title>
      <link>http://www.muller.tech/post/2017/06/13/node-package-json-scripts/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/06/13/node-package-json-scripts/</guid>
      <description>If you are developing an angular application, chances are you are using @angular/cli. It is a fantastic tools which comes packed with awesome time saving features. Now recently I had to work on a node.js backend project and I dearly missed @angular/cli, so this post is about a couple tricks I found to mock @angular/cli&amp;rsquo;s features.
ng test Usually angular&amp;rsquo;s unit test are along side the file they refer to, in node sadly most of the time it is not the case.</description>
    </item>
    
    <item>
      <title>Angular2 - Create a npm package</title>
      <link>http://www.muller.tech/post/2017/03/07/create-npm-package/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/03/07/create-npm-package/</guid>
      <description>Creating a npm package out of your application can prove very useful. Whether you want to reuse a component you created in another of your application or if you just want to share your work with the opensource community, npm is the way to go. In this post I will describe how to create an npm package out of you angular 2 application. (created with angular cli)
You need to make sure your package.</description>
    </item>
    
    <item>
      <title>Angular2 - pre bootstrap loading animation</title>
      <link>http://www.muller.tech/post/2017/03/07/create-pre-bootstrap-animation/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/03/07/create-pre-bootstrap-animation/</guid>
      <description>After a while it gets annoying to see angular2&amp;rsquo;s native loading.. everytime to start your app. Today&amp;rsquo;s post will show you how to change this. It is fairly easy to do, first let&amp;rsquo;s take a look at our index.html file. I am going to use a pre-bootstrap wrapper to position our animation pre-bootstrap-spinner and a small label pre-bootstrap-text.
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;XapiDemo&amp;lt;/title&amp;gt; &amp;lt;base href=&amp;#34;/&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; href=&amp;#34;favicon.</description>
    </item>
    
    <item>
      <title>Atom - plugin</title>
      <link>http://www.muller.tech/post/2017/02/17/atom-plugin/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/02/17/atom-plugin/</guid>
      <description>IDE configuration can save programmers a lot of time and effort, in this post I would like to share my personal configuration of Atom to developer angular2 apps.
   Plugin Description     atom-typescript typescript styling &amp;amp; autocomplete   linter-tslint linters for typescript   markdown-preview-plus IDE preview of markdown files   open-in-browsers opens HTML file in browsers from IDE   todo-show lists TODO in the IDE   auto-save Saves changes on blur    </description>
    </item>
    
    <item>
      <title>Angular2 observable - Stream continuation</title>
      <link>http://www.muller.tech/post/2017/02/16/angular2-observable-stream-continuation/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/02/16/angular2-observable-stream-continuation/</guid>
      <description>Keeping an observable stream up and running is a common use case for many application. Lets take the example of an application with an input field taking a location as parameter which then calls foursquare&amp;rsquo;s API at each key stroke to query the recommended location nearby. If an HTTP call to foursquare fails, we want our observable stream to stay up and running.
// home.component.ts @Component({ selector: &amp;#39;vs-home&amp;#39;, template: ` &amp;lt;div class=&amp;#34;home&amp;#34;&amp;gt; &amp;lt;form [formGroup]=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;md-input-container class=&amp;#34;form-group&amp;#34; &amp;gt; &amp;lt;input md-input class=&amp;#34;form-control&amp;#34; formControlName=&amp;#34;location&amp;#34; placeholder=&amp;#34;Choose a Location&amp;#34;&amp;gt; &amp;lt;/md-input-container&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;h2&amp;gt;Recommended venues close to this location:&amp;lt;/h2&amp;gt; &amp;lt;div *ngFor=&amp;#34;let venue of venues | async&amp;#34; &amp;gt; &amp;lt;vs-venue [venue]=&amp;#34;venue&amp;#34;&amp;gt;&amp;lt;/vs-venue&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ` }) export class HomeComponent implements OnInit { venues: Observable&amp;lt;Venue[]&amp;gt;; form: any; constructor( private venueService: VenueService, private formBuilder: FormBuilder ) {} ngOnInit() { this.</description>
    </item>
    
    <item>
      <title>Angular2 components - Share data between components</title>
      <link>http://www.muller.tech/post/2017/01/23/angular2-share-data-between-components/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/23/angular2-share-data-between-components/</guid>
      <description>For my first post on angular2, I would like to analyse how to share data between components. Sharing data between a parent component and a child component is fairly straight forward, but doing so between sibling components is a lot more work.
I am going to take a real life example of a home page with an search bar that drives a list of trainers. Here the parent component is the home.</description>
    </item>
    
    <item>
      <title>Angular2 pipe - Force pipes to detect changes</title>
      <link>http://www.muller.tech/post/2017/01/23/angular2-pipe-does-not-detect-change/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/23/angular2-pipe-does-not-detect-change/</guid>
      <description>The goal of this post, is to explore how pipe work and to make them do what we expect of them! Before futher due, let&amp;rsquo;s see an example. The example I am going to use, is a list of trainers filtered by sports, this list is driven by an input field.
Scenario &amp;lt;md-card *ngFor=&amp;#34;let trainer of trainers | criteria:&amp;#39;sport&amp;#39;:sportSearch&amp;#34;&amp;gt; {{ trainer.name }} {{ trainer.sport }} &amp;lt;/md-card&amp;gt; The behavior you would expect, is that every time you modify the list of sportSearch, the list of trainers gets updated.</description>
    </item>
    
    <item>
      <title>Deploy an angular app on Github</title>
      <link>http://www.muller.tech/post/2017/01/17/deploy-angular-app-on-github-pages/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/17/deploy-angular-app-on-github-pages/</guid>
      <description>A cheap way to deploy your angular project is to use Github pages. For a long time you needed to have a gh-pages branch containing your dist code, but recently Github allowed the dist code to be in docs which makes our life a little easier. Bellow is a little script script to build the production version of the dist file in the docs folder.
ng build --target=production --base-href=http://www.muller.tech/repository_name/ --output-path=docs  Once you ran this command, just push it on your github repo and you are done!</description>
    </item>
    
    <item>
      <title>Git cheat sheet</title>
      <link>http://www.muller.tech/post/2017/01/17/git-cheat-sheet/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/17/git-cheat-sheet/</guid>
      <description> git revert Lets say you just commited a change on a branch an you realise you are on the wrong branch. What you need to do is revert your changes stash them checkout the branch you want and re-apply your changes.
git reset --soft HEAD^ git stash git checkout my_branch git stash pop  </description>
    </item>
    
    <item>
      <title>Unit test $http.post with parameters</title>
      <link>http://www.muller.tech/post/2017/01/10/unit-test-http-post-with-param/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/10/unit-test-http-post-with-param/</guid>
      <description>Scenario In this example I will demonstrate how to unit $http.post when used with parameters.
This is a real life example of an application, calling the backend with $http.post to register a new device. The difficulty here is, that the post includes a parameter, we need to find a way to access it.
registerDevice: function (token) { return $http.post(configuration.getFrontEndUrl(&amp;#39;notification_devices&amp;#39;), { notification_device: { device_token: token } }); } }  There are two assertions we need to check: * A call has been made to configuration.</description>
    </item>
    
    <item>
      <title>Unit test $http.get</title>
      <link>http://www.muller.tech/post/2017/01/09/unit-test-http-get/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/09/unit-test-http-get/</guid>
      <description>Scenario In this example I will demonstrate how to unit $http.get.
This is a real life example of an application, calling the backend with $http.get to retrieve the count of notifications. The difficulty here is, that when our call gets resolved we don&amp;rsquo;t assign a value to our scope, we just return the result. So we need to find a way to access this.
getUnreadNotificationsCount: function (employeeId) { return $http.</description>
    </item>
    
    <item>
      <title>Unit test events</title>
      <link>http://www.muller.tech/post/2017/01/09/unit-test-events/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2017/01/09/unit-test-events/</guid>
      <description>Scenario In this example I will demonstrate how to unit test an event. The difficulty here, is to set the element&amp;rsquo;s target.
$scope.toggleRadioButton = function (e) { e.stopImmediatePropagation(); if (angular.element(e.target).hasClass(&amp;#39;my-radio-button&amp;#39;)) { $scope.selectedButton = true; } };  Solution it(&amp;#39;stopImmediatePropagation is called and $scope.selectedButton is set to true&amp;#39;, function () { elem = angular.element(&amp;#39;&amp;lt;div class=&amp;#34;my-radio-button&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;); event = { target: elem, stopImmediatePropagation: function () {} }; spyOn(event, &amp;#39;stopImmediatePropagation&amp;#39;); scope.toggleRadioButton(event); expect(event.stopImmediatePropagation).toHaveBeenCalled(); expect(scope.selectedButton).toEqual(true); });  Analysis  We create an element with the class my-radio-button We create an event with two parameters, the element we just created and a fake stopImmediatePropagation function We spy on event.</description>
    </item>
    
    <item>
      <title>Unit test - Mock promises</title>
      <link>http://www.muller.tech/post/2016/12/23/unit-test-mock-promises/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2016/12/23/unit-test-mock-promises/</guid>
      <description>When first writing Javascript and specially when unit testing it, promises can be one of the hardest thing to understand.
Scenario In this example we would like to mock a simple service returning a promise.
This is a real life example, of an application, calling an employeeService to retrieve the notificationCount.
employeeService.getEmployee().then(function (employee) { $scope.unreadNotifications = employee.notificationCount; });  Usually to mock a function, we would just do:
employeeService.getEmployee = function () { return { notification: 2 } }  However that wouldn&amp;rsquo;t work here since employeeService.</description>
    </item>
    
    <item>
      <title>Unit test controllers</title>
      <link>http://www.muller.tech/post/2016/12/23/unit-test-controllers/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2016/12/23/unit-test-controllers/</guid>
      <description>Scenario We want to unit test a very basic controller with Jasmine.
(function () { &amp;#39;use strict&amp;#39;; /** * @ngdoc controller * @name fuji.app.controllers:AboutCtrl * @description */ angular .module(&amp;#39;fuji.app.controllers&amp;#39;) .controller(&amp;#39;AboutCtrl&amp;#39;, AboutCtrl); function AboutCtrl ($scope, configuration, appVersion) { $scope.viewClassName = &amp;#39;wps-view-about&amp;#39;; $scope.accountCode = configuration.getAccountServiceConfig(); $scope.buildVersion = appVersion.buildVersion(); } })();  This controller is doing one thing.
 Initialize some scope variables $scope.viewClassName, $scope.accountCode and $scope.buildVersion  Solution We have 3 test we need to do:</description>
    </item>
    
    <item>
      <title>Unit test controllers with resolved variables</title>
      <link>http://www.muller.tech/post/2016/12/23/unit-test-controllers-with-resolved-variable-from-routing/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2016/12/23/unit-test-controllers-with-resolved-variable-from-routing/</guid>
      <description>Scenario Today&amp;rsquo;s post is about testing a controller that uses variables from a resolve function in the routing.
This is a real life example used in translations, say we want to handle different languages, we need to load the available languages and the selected one from a service.
$stateProvider.state(&amp;#39;locales&amp;#39;, { url: &amp;#39;/locales&amp;#39;, templateUrl: &amp;#39;views/locales.html&amp;#39;, controller: &amp;#39;LocaleCtrl&amp;#39;, data: { secure: true, backState: &amp;#39;settings&amp;#39; }, resolve: { availableLocales: function (i18n) { return i18n.</description>
    </item>
    
    <item>
      <title>Unit test the removal of a class</title>
      <link>http://www.muller.tech/post/2016/12/22/unit-test-removal-of-a-class/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.muller.tech/post/2016/12/22/unit-test-removal-of-a-class/</guid>
      <description>Scenario My app loads with a splash screen, this splash screen disappears after a timeout. I would like to unit test the disparition of the splash screen.
Splash screen:
&amp;lt;div class=&amp;#34;splash on&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; Code driving the disparition of the splash screen:
$timeout(function () { angular .element(&amp;#39;.splash&amp;#39;) .removeClass(&amp;#39;on&amp;#39;); }, 2000);  Solution First we need a way to create find the element in the DOM. We need to assert the element has the close on, then wait for the $timeout to finish and finally assert again that class on disappeared.</description>
    </item>
    
  </channel>
</rss>